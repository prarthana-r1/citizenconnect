import { 
    GoogleGenerativeAI, 
    HarmCategory, 
    HarmBlockThreshold 
  } from "@google/generative-ai";
  
  class GeminiService {
    private static instance: GeminiService | null = null;
    private genAI?: GoogleGenerativeAI;
  
    private constructor() {
      const apiKey = process.env.NEXT_PUBLIC_GEMINI_API_KEY;
      if (!apiKey) {
        console.warn("‚ö† Warning: Gemini API key is missing. Chatbot functionality may be limited.");
        return;
      }
      
      this.genAI = new GoogleGenerativeAI(apiKey);
    }
  
    public static getInstance(): GeminiService {
      if (!GeminiService.instance) {
        GeminiService.instance = new GeminiService();
      }
      return GeminiService.instance;
    }
  
    public async generateResponse(prompt: string): Promise<string> {
      if (!this.genAI) {
        return "üö® Error: Gemini API is not initialized due to a missing API key.";
      }
  
      try {
        const model = this.genAI.getGenerativeModel({ model: "gemini-1.5-pro-latest" });
  
        const generationConfig = {
          temperature: 0.85,
          topK: 40,
          topP: 0.95,
          maxOutputTokens: 2048,
        };
  
        const safetySettings = [
          { category: HarmCategory.HARM_CATEGORY_HARASSMENT, threshold: HarmBlockThreshold.BLOCK_NONE },
          { category: HarmCategory.HARM_CATEGORY_HATE_SPEECH, threshold: HarmBlockThreshold.BLOCK_NONE },
        ];
  
        // üîπ Improve prompt structuring
        let formattedPrompt = `
        You are a knowledgeable AI assistant. Respond concisely but informatively. 
  
        Guidelines:
        - Use bullet points where appropriate.
        - Ensure responses are formatted clearly with bold headings.
        - Maintain professional but conversational tone.
  
        ${prompt.trim()}
        `;
  
        console.log("üìå Formatted Prompt:", formattedPrompt);
  
        const result = await model.generateContent({
          contents: [{ role: "user", parts: [{ text: formattedPrompt }] }],
          generationConfig,
          safetySettings,
        });
  
        // üîπ Extract response correctly
        const response = result.response;
        if (!response?.candidates?.length) {
          return "‚ö† No response generated by the model.";
        }
  
        const responseCandidate = response.candidates?.[0];
        const responseParts = responseCandidate?.content?.parts || [];
        let responseText = responseParts.map(part => part.text).join("\n").trim();
  
        console.log("üìå Raw Gemini API Response:", JSON.stringify(response, null, 2));
  
        // üîπ Format response for better readability
       // üîπ Ensure response is properly formatted
       responseText = responseText
       .replace(/‚Ä¢\s*/g, "\n\n‚Ä¢ ")  // Ensure bullet points start on a new line
       .replace(/\\(.?)\\/g, "\n\n$1*\n") // Ensure bold text starts on a new line
       .replace(/(\.\s*)‚Ä¢/g, "\n\n‚Ä¢") // Fix bullet points after a period
       .replace(/\n{2,}/g, "\n\n") // Ensure no excessive new lines
       .trim();
     
  
        return responseText;
      } catch (error) {
        console.error("‚ùå Gemini API Error:", error);
  
        if (error instanceof Error) {
          return "üö® Error: ${error.message}. Please check API key and network.";
        }
  
        return "‚ö† An unexpected error occurred while generating a response.";
      }
    }
  }
  
  export default GeminiService;